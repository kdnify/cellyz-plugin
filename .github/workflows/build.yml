name: Build Cellyz Plugin

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            artifact: macOS
          - os: windows-latest
            artifact: Windows

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup JUCE (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "Downloading JUCE 8.0.8 for macOS..."
        curl -L -o juce.zip "https://github.com/juce-framework/JUCE/releases/download/8.0.8/juce-8.0.8-osx.zip"
        unzip juce.zip
        
        # Find the JUCE directory (could be JUCE or juce-8.0.8-osx/JUCE)
        if [ -d "juce-8.0.8-osx/JUCE" ]; then
          JUCE_DIR="juce-8.0.8-osx/JUCE"
        elif [ -d "JUCE" ]; then
          JUCE_DIR="JUCE"
        else
          echo "JUCE directory structure:"
          ls -la
          exit 1
        fi
        
        echo "Installing JUCE from: $JUCE_DIR"
        sudo mkdir -p /usr/local/juce
        sudo cp -r "$JUCE_DIR"/* /usr/local/juce/
        
        # Verify installation
        echo "JUCE installation:"
        ls -la /usr/local/juce/
        
        # Set JUCE_PATH for the build
        echo "JUCE_PATH=/usr/local/juce" >> $GITHUB_ENV

    - name: Setup JUCE (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        curl -L -o juce.zip "https://github.com/juce-framework/JUCE/releases/download/8.0.8/juce-8.0.8-windows.zip"
        7z x juce.zip
        mkdir C:\JUCE 2>nul || echo Directory exists
        xcopy /E /I /Y juce-8.0.8-windows\JUCE\* C:\JUCE\ 2>nul || xcopy /E /I /Y JUCE\* C:\JUCE\ 2>nul || echo JUCE setup completed
        dir C:\JUCE

    - name: Build macOS
      if: matrix.os == 'macos-latest'
      run: |
        cd Builds/MacOSX
        xcodebuild -project test.xcodeproj -scheme "test - AU" -configuration Release -allowProvisioningUpdates
        xcodebuild -project test.xcodeproj -scheme "test - VST3" -configuration Release -allowProvisioningUpdates || echo "VST3 build failed, continuing with AU only"

    - name: Setup MSBuild (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v2

    - name: Build Windows
      if: matrix.os == 'windows-latest'
      run: |
        cd Builds/Windows
        msbuild Cellyz.sln -p:Configuration=Release -p:Platform=x64 -v:minimal

    - name: Package Artifacts
      shell: bash
      run: |
        mkdir -p artifacts
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "Collecting macOS artifacts..."
          find Builds/MacOSX -name "*.component" -o -name "*.vst3" | head -10
          # Look for both test.* and Cellyz.* plugins (naming inconsistency)
          if [ -d "Builds/MacOSX/build/Release/test.component" ]; then
            cp -r "Builds/MacOSX/build/Release/test.component" artifacts/
            echo "✓ Copied test AU plugin"
          fi
          if [ -d "Builds/MacOSX/build/Release/test.vst3" ]; then
            cp -r "Builds/MacOSX/build/Release/test.vst3" artifacts/
            echo "✓ Copied test VST3 plugin"
          fi
          if [ -d "Builds/MacOSX/build/Release/Cellyz.component" ]; then
            cp -r "Builds/MacOSX/build/Release/Cellyz.component" artifacts/
            echo "✓ Copied Cellyz AU plugin"
          fi
          if [ -d "Builds/MacOSX/build/Release/Cellyz.vst3" ]; then
            cp -r "Builds/MacOSX/build/Release/Cellyz.vst3" artifacts/
            echo "✓ Copied Cellyz VST3 plugin"
          fi
        else
          echo "Collecting Windows artifacts..."
          find Builds/Windows -name "*.dll" -o -name "*.vst3" | head -10
          # Check multiple possible locations for Windows build output
          if [ -d "Builds/Windows/x64/Release/VST3/Cellyz.vst3" ]; then
            cp -r "Builds/Windows/x64/Release/VST3/Cellyz.vst3" artifacts/
            echo "✓ Copied VST3 plugin from x64/Release/VST3/"
          elif [ -d "Builds/Windows/x64/Release/Cellyz.vst3" ]; then
            cp -r "Builds/Windows/x64/Release/Cellyz.vst3" artifacts/
            echo "✓ Copied VST3 plugin from x64/Release/"
          elif [ -f "Builds/Windows/x64/Release/VST3/Cellyz.dll" ]; then
            mkdir -p artifacts/Cellyz.vst3/Contents/x86_64-win
            cp "Builds/Windows/x64/Release/VST3/Cellyz.dll" artifacts/Cellyz.vst3/Contents/x86_64-win/
            echo "✓ Created VST3 bundle from DLL"
          else
            echo "⚠️ VST3 not found, searching all build outputs:"
            find Builds/Windows -type f -name "*.dll" -o -name "*.vst3" -o -name "Cellyz*"
          fi
          
          # Windows installer is built by separate Inno Setup action
          echo "Windows VST3 ready for installer (built separately)"
        fi
        
        # List final artifacts
        echo "Final artifacts:"
        ls -la artifacts/

    - name: Build Windows Installer (Windows)
      if: matrix.os == 'windows-latest'
      uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
      with:
        path: installer/cellyz-installer.iss
        options: /O+

    - name: Collect Windows Installer (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        echo "Looking for compiled installer..."
        find . -name "*.exe" -type f | grep -i setup || echo "No setup.exe found"
        find . -name "*Cellyz*.exe" -type f || echo "No Cellyz exe found"
        # The Inno Setup action typically outputs to the installer directory or project root
        if [ -f "installer/Cellyz_Phone_FX_v1.0_Setup.exe" ]; then
          cp "installer/Cellyz_Phone_FX_v1.0_Setup.exe" artifacts/
          echo "✓ Found installer in installer directory"
        elif [ -f "Cellyz_Phone_FX_v1.0_Setup.exe" ]; then
          cp "Cellyz_Phone_FX_v1.0_Setup.exe" artifacts/
          echo "✓ Found installer in project root"
        else
          echo "⚠️ Installer not found, listing all exe files:"
          find . -name "*.exe" -type f || echo "No exe files found"
        fi
        
        echo "Final artifacts with installer:"
        ls -la artifacts/

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}-Build
        path: artifacts/
        retention-days: 90 