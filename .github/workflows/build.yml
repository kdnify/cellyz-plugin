name: Build Cellyz Plugin

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            artifact: macOS
          - os: windows-latest
            artifact: Windows

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup JUCE (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "Downloading JUCE 8.0.8 for macOS..."
        curl -L -o juce.zip "https://github.com/juce-framework/JUCE/releases/download/8.0.8/juce-8.0.8-osx.zip"
        unzip juce.zip
        
        # Find the JUCE directory (could be JUCE or juce-8.0.8-osx/JUCE)
        if [ -d "juce-8.0.8-osx/JUCE" ]; then
          JUCE_DIR="juce-8.0.8-osx/JUCE"
        elif [ -d "JUCE" ]; then
          JUCE_DIR="JUCE"
        else
          echo "JUCE directory structure:"
          ls -la
          exit 1
        fi
        
        echo "Installing JUCE from: $JUCE_DIR"
        
        # Install JUCE to the hardcoded path the Xcode project expects
        sudo mkdir -p /Users/khaydien/Downloads/JUCE
        sudo cp -r "$JUCE_DIR"/* /Users/khaydien/Downloads/JUCE/
        
        # Also install JUCE modules to the project-relative path
        mkdir -p JuceLibraryCode/modules
        cp -r "$JUCE_DIR/modules"/* JuceLibraryCode/modules/
        
        # Verify installations
        echo "JUCE installation (hardcoded path):"
        ls -la /Users/khaydien/Downloads/JUCE/modules/ | head -5
        echo "JUCE installation (project path):"
        ls -la JuceLibraryCode/modules/ | head -5
        
        # Set JUCE_PATH for the build
        echo "JUCE_PATH=/Users/khaydien/Downloads/JUCE" >> $GITHUB_ENV

    - name: Setup JUCE (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        curl -L -o juce.zip "https://github.com/juce-framework/JUCE/releases/download/8.0.8/juce-8.0.8-windows.zip"
        7z x juce.zip
        mkdir C:\JUCE 2>nul || echo Directory exists
        xcopy /E /I /Y juce-8.0.8-windows\JUCE\* C:\JUCE\ 2>nul || xcopy /E /I /Y JUCE\* C:\JUCE\ 2>nul || echo JUCE setup completed
        dir C:\JUCE

    - name: Build macOS
      if: matrix.os == 'macos-latest'
      run: |
        cd Builds/MacOSX
        xcodebuild -project test.xcodeproj -scheme "test - AU" -configuration Release -allowProvisioningUpdates
        xcodebuild -project test.xcodeproj -scheme "test - VST3" -configuration Release -allowProvisioningUpdates || echo "VST3 build failed, continuing with AU only"

    - name: Setup MSBuild (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v2

    - name: Build Windows
      if: matrix.os == 'windows-latest'
      run: |
        cd Builds/Windows
        msbuild Cellyz.sln -p:Configuration=Release -p:Platform=x64 -v:minimal

    - name: Package Artifacts
      shell: bash
      run: |
        mkdir -p artifacts
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "Creating macOS .pkg installer..."
          
          # Check what we actually built
          echo "Checking built plugins:"
          find Builds/MacOSX/build -name "*.component" -o -name "*.vst3" 2>/dev/null || echo "No plugins found"
          
          # Create a simple .pkg using just pkgbuild (simpler approach)
          if [ -d "Builds/MacOSX/build/Release/test.component" ]; then
            echo "Creating AU installer..."
            pkgbuild --root "Builds/MacOSX/build/Release" \
                     --identifier com.cellyz.phonefx \
                     --version 1.0 \
                     --install-location "/Library/Audio/Plug-Ins" \
                     --scripts /dev/null \
                     artifacts/Cellyz_Phone_FX_v1.0.pkg
            
            if [ -f "artifacts/Cellyz_Phone_FX_v1.0.pkg" ]; then
              echo "✅ Successfully created Cellyz_Phone_FX_v1.0.pkg"
            else
              echo "❌ Failed to create .pkg installer"
              # Fallback: create a simple zip for now
              cd "Builds/MacOSX/build/Release"
              zip -r "../../../../artifacts/Cellyz_Phone_FX_v1.0_Mac.zip" *.component *.vst3 2>/dev/null || echo "No plugins to zip"
              cd ../../../../
            fi
          else
            echo "❌ No test.component found for packaging"
            ls -la Builds/MacOSX/build/Release/ || echo "Release directory not found"
          fi
          
        else
          echo "Windows build - preparing VST3 for Inno Setup..."
          
          # Create artifacts directory for Inno Setup to find the VST3
          echo "Looking for built VST3..."
          find Builds/Windows -name "*.vst3" -type d | head -5
          
          # Copy VST3 to artifacts so Inno Setup can find it
          if [ -d "Builds/Windows/x64/Release/VST3/Cellyz.vst3" ]; then
            cp -r "Builds/Windows/x64/Release/VST3/Cellyz.vst3" artifacts/
            echo "✅ Copied VST3 plugin for Inno Setup: x64/Release/VST3/"
          elif [ -d "Builds/Windows/x64/Release/Cellyz.vst3" ]; then
            cp -r "Builds/Windows/x64/Release/Cellyz.vst3" artifacts/
            echo "✅ Copied VST3 plugin for Inno Setup: x64/Release/"
          elif [ -f "Builds/Windows/x64/Release/VST3/Cellyz.dll" ]; then
            mkdir -p artifacts/Cellyz.vst3/Contents/x86_64-win
            cp "Builds/Windows/x64/Release/VST3/Cellyz.dll" artifacts/Cellyz.vst3/Contents/x86_64-win/
            echo "✅ Created VST3 bundle for Inno Setup from DLL"
          else
            echo "❌ VST3 not found, searching all build outputs:"
            find Builds/Windows -type f -name "*.dll" -o -name "*.vst3" -o -name "Cellyz*"
          fi
          
          echo "VST3 ready for Inno Setup packaging:"
          ls -la artifacts/
        fi

    - name: Build Windows Installer (Windows)
      if: matrix.os == 'windows-latest'
      uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
      with:
        path: installer/cellyz-installer.iss
        options: /O+

    - name: Collect Windows Installer (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        echo "Collecting ONLY the Windows installer (.exe)..."
        
        # Find and collect ONLY the .exe installer (not VST3 files)
        if [ -f "installer/Cellyz_Phone_FX_v1.0_Setup.exe" ]; then
          cp "installer/Cellyz_Phone_FX_v1.0_Setup.exe" artifacts/
          echo "✅ Found Windows installer in installer directory"
        elif [ -f "Cellyz_Phone_FX_v1.0_Setup.exe" ]; then
          cp "Cellyz_Phone_FX_v1.0_Setup.exe" artifacts/
          echo "✅ Found Windows installer in project root"
        else
          echo "❌ Windows installer not found, searching..."
          find . -name "*Setup*.exe" -type f 2>/dev/null | head -5
          find . -name "*Cellyz*.exe" -type f 2>/dev/null | head -5
        fi
        
        # Remove the VST3 files that were needed for Inno Setup but shouldn't be in final artifacts
        echo "Cleaning up VST3 files (keeping only .exe installer)..."
        find artifacts -name "*.vst3" -type d -exec rm -rf {} + 2>/dev/null || true
        find artifacts -name "*.dll" -type f -delete 2>/dev/null || true
        
        # Verify we ONLY have the installer
        echo "Final Windows artifacts (should only be .exe):"
        ls -la artifacts/
        
        # Final verification
        file_count=$(ls -1 artifacts/ 2>/dev/null | wc -l)
        echo "Final artifact count: $file_count (should be 1)"

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Cellyz-Phone-FX-${{ matrix.artifact }}
        path: artifacts/
        retention-days: 90 