name: Build Cellyz Plugin

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            artifact: macOS
          - os: windows-latest
            artifact: Windows

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup JUCE (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "Downloading JUCE 8.0.8 for macOS..."
        curl -L -o juce.zip "https://github.com/juce-framework/JUCE/releases/download/8.0.8/juce-8.0.8-osx.zip"
        unzip juce.zip
        
        # Find the JUCE directory (could be JUCE or juce-8.0.8-osx/JUCE)
        if [ -d "juce-8.0.8-osx/JUCE" ]; then
          JUCE_DIR="juce-8.0.8-osx/JUCE"
        elif [ -d "JUCE" ]; then
          JUCE_DIR="JUCE"
        else
          echo "JUCE directory structure:"
          ls -la
          exit 1
        fi
        
        echo "Installing JUCE from: $JUCE_DIR"
        
        # Install JUCE to the hardcoded path the Xcode project expects
        sudo mkdir -p /Users/khaydien/Downloads/JUCE
        sudo cp -r "$JUCE_DIR"/* /Users/khaydien/Downloads/JUCE/
        
        # Also install JUCE modules to the project-relative path
        mkdir -p JuceLibraryCode/modules
        cp -r "$JUCE_DIR/modules"/* JuceLibraryCode/modules/
        
        # Verify installations
        echo "JUCE installation (hardcoded path):"
        ls -la /Users/khaydien/Downloads/JUCE/modules/ | head -5
        echo "JUCE installation (project path):"
        ls -la JuceLibraryCode/modules/ | head -5
        
        # Set JUCE_PATH for the build
        echo "JUCE_PATH=/Users/khaydien/Downloads/JUCE" >> $GITHUB_ENV

    - name: Setup JUCE (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        curl -L -o juce.zip "https://github.com/juce-framework/JUCE/releases/download/8.0.8/juce-8.0.8-windows.zip"
        7z x juce.zip
        mkdir C:\JUCE 2>nul || echo Directory exists
        xcopy /E /I /Y juce-8.0.8-windows\JUCE\* C:\JUCE\ 2>nul || xcopy /E /I /Y JUCE\* C:\JUCE\ 2>nul || echo JUCE setup completed
        dir C:\JUCE

    - name: Build macOS
      if: matrix.os == 'macos-latest'
      run: |
        cd Builds/MacOSX
        xcodebuild -project test.xcodeproj -scheme "test - AU" -configuration Release -allowProvisioningUpdates
        xcodebuild -project test.xcodeproj -scheme "test - VST3" -configuration Release -allowProvisioningUpdates || echo "VST3 build failed, continuing with AU only"

    - name: Setup MSBuild (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v2

    - name: Build Windows
      if: matrix.os == 'windows-latest'
      run: |
        cd Builds/Windows
        msbuild Cellyz.sln -p:Configuration=Release -p:Platform=x64 -v:minimal

    - name: Package Artifacts
      shell: bash
      run: |
        mkdir -p artifacts
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "Creating macOS .pkg installer..."
          
          # Create temporary installer structure
          mkdir -p installer_temp/AU
          mkdir -p installer_temp/VST3
          
          # Copy built plugins to installer structure
          if [ -d "Builds/MacOSX/build/Release/test.component" ]; then
            cp -r "Builds/MacOSX/build/Release/test.component" installer_temp/AU/
            echo "✓ Found AU plugin"
          fi
          if [ -d "Builds/MacOSX/build/Release/test.vst3" ]; then
            cp -r "Builds/MacOSX/build/Release/test.vst3" installer_temp/VST3/
            echo "✓ Found VST3 plugin"
          fi
          
          # Create .pkg installer using pkgbuild and productbuild
          echo "Building macOS installer package..."
          
          # Create component packages
          if [ -d "installer_temp/AU/test.component" ]; then
            pkgbuild --root installer_temp/AU \
                     --identifier com.cellyz.au \
                     --version 1.0 \
                     --install-location "/Library/Audio/Plug-Ins/Components" \
                     AU.pkg
          fi
          
          if [ -d "installer_temp/VST3/test.vst3" ]; then
            pkgbuild --root installer_temp/VST3 \
                     --identifier com.cellyz.vst3 \
                     --version 1.0 \
                     --install-location "/Library/Audio/Plug-Ins/VST3" \
                     VST3.pkg
          fi
          
          # Create distribution XML for combined installer
          cat > Distribution.xml << 'DISTXML'
        <?xml version="1.0" encoding="utf-8"?>
        <installer-gui-script minSpecVersion="1">
            <title>Cellyz Phone FX</title>
            <organization>Cellyz Audio</organization>
            <domains enable_anywhere="false" enable_currentUserHome="false" enable_localSystem="true"/>
            <options customize="never" require-scripts="false" hostArchitectures="arm64,x86_64"/>
            
            <welcome file="welcome.txt"/>
            <conclusion file="conclusion.txt"/>
            
            <choices-outline>
                <line choice="default">
                    <line choice="au"/>
                    <line choice="vst3"/>
                </line>
            </choices-outline>
            
            <choice id="default"/>
            <choice id="au" visible="false">
                <pkg-ref id="com.cellyz.au"/>
            </choice>
            <choice id="vst3" visible="false">
                <pkg-ref id="com.cellyz.vst3"/>
            </choice>
            
            <pkg-ref id="com.cellyz.au" version="1.0" auth="root">AU.pkg</pkg-ref>
            <pkg-ref id="com.cellyz.vst3" version="1.0" auth="root">VST3.pkg</pkg-ref>
        </installer-gui-script>
        DISTXML
          
          # Create welcome text
          cat > welcome.txt << 'WELCOME'
        Welcome to Cellyz Phone FX v1.0

        This installer will install the Cellyz Phone FX audio plugin with authentic phone call simulation effects.

        • Nokia phone simulation
        • iPhone phone simulation  
        • Sony Ericsson phone simulation

        The plugin will be installed as both AU and VST3 formats for maximum DAW compatibility.
        WELCOME

          # Create conclusion text  
          cat > conclusion.txt << 'CONCLUSION'
        Cellyz Phone FX has been successfully installed!

        You can now use the plugin in your favorite DAW:
        • AU Component: /Library/Audio/Plug-Ins/Components/
        • VST3 Plugin: /Library/Audio/Plug-Ins/VST3/

        Thank you for using Cellyz Audio products!
        CONCLUSION
          
          # Build the final .pkg installer
          productbuild --distribution Distribution.xml \
                       --package-path . \
                       artifacts/Cellyz_Phone_FX_v1.0.pkg
          
          echo "✅ Created Cellyz_Phone_FX_v1.0.pkg"
          
        else
          echo "Collecting Windows installer..."
          echo "Windows installer will be collected after Inno Setup builds it"
        fi
        
        echo "Artifacts so far:"
        ls -la artifacts/

    - name: Build Windows Installer (Windows)
      if: matrix.os == 'windows-latest'
      uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
      with:
        path: installer/cellyz-installer.iss
        options: /O+

    - name: Collect Windows Installer (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        echo "Collecting Windows installer..."
        
        # Find the compiled installer (Inno Setup creates it)
        if [ -f "installer/Cellyz_Phone_FX_v1.0_Setup.exe" ]; then
          cp "installer/Cellyz_Phone_FX_v1.0_Setup.exe" artifacts/
          echo "✅ Found Windows installer in installer directory"
        elif [ -f "Cellyz_Phone_FX_v1.0_Setup.exe" ]; then
          cp "Cellyz_Phone_FX_v1.0_Setup.exe" artifacts/
          echo "✅ Found Windows installer in project root"
        else
          echo "⚠️ Windows installer not found, searching..."
          find . -name "*Setup*.exe" -type f || echo "No setup exe files found"
          find . -name "*Cellyz*.exe" -type f || echo "No Cellyz exe files found"
        fi
        
        echo "Final artifacts:"
        ls -la artifacts/

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Cellyz-Phone-FX-${{ matrix.artifact }}
        path: artifacts/
        retention-days: 90 